plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.7'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '8.0.0'
}

group = 'dev.kreaker'
version = '0.0.1'

java {
   toolchain {
      languageVersion = JavaLanguageVersion.of(21)
   }
}

configurations {
   compileOnly {
      extendsFrom annotationProcessor
   }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // Database
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // Metrics and Monitoring
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave'

    // Report generation
    implementation 'com.itextpdf:itext7-core:7.2.5'
    implementation 'org.apache.poi:poi:5.2.4'
    implementation 'org.apache.poi:poi-ooxml:5.2.4'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:junit-jupiter'
    testRuntimeOnly 'com.h2database:h2'
}

tasks.named('test') {
    useJUnitPlatform()
}

spotless {
    java {
        target '**/*.java'
        targetExclude '**/build/**', '**/.gradle/**', 'out/**'

        googleJavaFormat('1.24.0').aosp()
        trimTrailingWhitespace()
        endWithNewline()
        leadingTabsToSpaces(4)

        custom 'noWildcardImports', {
            if (it.contains('import .*\\*')) {
                throw new RuntimeException('No use wildcard imports')
            }
        }

        custom 'enforceUtf8', {
            return new String(it.getBytes('UTF-8'), 'UTF-8')
        }
    }

    format 'properties', {
        target '**/*.properties'
        targetExclude '**/build/**', '**/.gradle/**', 'out/**'

        trimTrailingWhitespace()
        endWithNewline()
        leadingTabsToSpaces(2)

        // Sort properties alphabetically
        custom 'sortProperties', { content ->
            def lines = content.readLines()
            def result = []
            def commentBlock = []
            def propBlock = []

            lines.each { line ->
                def trimmed = line.trim()
                if (trimmed.startsWith('#') || trimmed.isEmpty()) {
                    if (!propBlock.isEmpty()) {
                        result.addAll(propBlock.sort { a, b ->
                            def keyA = a.split('=')[0].trim()
                            def keyB = b.split('=')[0].trim()
                            return keyA.compareToIgnoreCase(keyB)
                        })
                        propBlock.clear()
                    }
                    result.add(line)
                } else {
                    propBlock.add(line)
                }
            }

            if (!propBlock.isEmpty()) {
                result.addAll(propBlock.sort { a, b ->
                def keyA = a.split('=')[0].trim()
                def keyB = b.split('=')[0].trim()
                return keyA.compareToIgnoreCase(keyB)
                })
            }

            return result.join('\n')
        }
    }

    // YAML files (Spring Boot configs)
    format 'yaml', {
        target '**/*.yml', '**/*.yaml'
        targetExclude '**/build/**'

        trimTrailingWhitespace()
        endWithNewline()
        leadingTabsToSpaces(2)
    }

    // XML files (Maven, Spring configs)
    format 'xml', {
        target '**/*.xml'
        targetExclude '**/build/**'

        eclipseWtp('xml')
        trimTrailingWhitespace()
        endWithNewline()
        leadingTabsToSpaces(2)
    }

    // Additional formats
    format 'misc', {
        target '**/*.md', '**/*.gitignore'
        trimTrailingWhitespace()
        endWithNewline()
        leadingTabsToSpaces(3)
    }
}

// Custom tasks for IDE integration
task formatJava {
    group 'formatting'
    description 'Format only Java files'
    doLast {
        exec {
            commandLine './gradlew', 'spotlessJavaApply'
        }
    }
}

task formatProperties {
    group 'formatting'
    description 'Format only Properties files'
    doLast {
        exec {
            commandLine './gradlew', 'spotlessPropertiesApply'
        }
    }
}

task formatAll {
    group 'formatting'
    description 'Format all supported files'
    dependsOn 'spotlessApply'
}
